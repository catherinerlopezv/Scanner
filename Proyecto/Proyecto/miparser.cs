// DO NOT EDIT THIS FILE
// This file was generated using the Human Parser Generator
// (https://github.com/christophevg/human-parser-generator)
// on 22 April 2020 at 10:40:35
// Source : Gramatica.bnf

using System;
using System.IO;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Linq;

// nicio ::= SETS ;
public class Nicio {
public Sets Sets { get; set; }
  public override string ToString() {
return
"new Nicio() { " +
"Sets = " + ( this.Sets == null ? "null" : this.Sets.ToString() ) + 
"}";
}
}

// SETS ::= "SETS" { ListSet } ;
public class Sets {
public List<Listset> Listsets { get; set; }
  public Sets() {
this.Listsets = new List<Listset>();
}
  public override string ToString() {
return
"new Sets() { " +
"Listsets = new List<Listset>() {" + 
string.Join(",", this.Listsets.Select(x => x.ToString())) +
"}" + 
"}";
}
}

// ListSet ::= ( Id "=" Let ) | ( Id "=" Dig ) | ( Id "=" Chart ) ;
public class Listset {
public Id Id0 { get; set; }
public Let Let { get; set; }
public Id Id1 { get; set; }
public Dig Dig { get; set; }
public Id Id2 { get; set; }
public Chart Chart { get; set; }
  public override string ToString() {
return
"new Listset() { \n" +
"Id0 = " + ( this.Id0 == null ? "null" : this.Id0.ToString() ) + ",\n" +
"Let = " + ( this.Let == null ? "null" : this.Let.ToString() ) + ",\n" +
"Id1 = " + ( this.Id1 == null ? "null" : this.Id1.ToString() ) + ",\n" +
"Dig = " + ( this.Dig == null ? "null" : this.Dig.ToString() ) + ",\n" +
"Id2 = " + ( this.Id2 == null ? "null" : this.Id2.ToString() ) + ",\n" +
"Chart = " + ( this.Chart == null ? "null" : this.Chart.ToString() ) + 
"}";
}
}

// TOKENS ::= "TOKENS" { ListToken } ;
public class Tokens {
public List<Listtoken> Listtokens { get; set; }
  public Tokens() {
this.Listtokens = new List<Listtoken>();
}
  public override string ToString() {
return
"new Tokens() { " +
"Listtokens = new List<Listtoken>() {" + 
string.Join(",", this.Listtokens.Select(x => x.ToString())) +
"}" + 
"}";
}
}

// ListToken ::= IdT "=" TOKEN ;
public class Listtoken {
public Idt Idt { get; set; }
public Token Token { get; set; }
  public override string ToString() {
return
"new Listtoken() { \n" +
"Idt = " + ( this.Idt == null ? "null" : this.Idt.ToString() ) + ",\n" +
"Token = " + ( this.Token == null ? "null" : this.Token.ToString() ) + 
"}";
}
}

// TOKEN ::= Id Id "*" | "'" Caracteres "'" | "'" Letra "'" | "'" Caracteres "'" "'" Caracteres "'" | "'" Letra "'" "'" Letra "'" | "'" "" "" Id "" "" "'" | "'" "'" "'" Id "'" "'" "'" | Id "(" Id "|" Id ")" "*" "{" "RESERVADAS" "(" ")" "}" ;
public class Token {
public Id Id0 { get; set; }
public Id Id1 { get; set; }
public Caracteres Caracteres0 { get; set; }
public string Letra0 { get; set; }
public Caracteres Caracteres1 { get; set; }
public Caracteres Caracteres2 { get; set; }
public string Letra1 { get; set; }
public string Letra2 { get; set; }
public Id Id2 { get; set; }
public Id Id3 { get; set; }
public Id Id4 { get; set; }
public Id Id5 { get; set; }
public Id Id6 { get; set; }
  public override string ToString() {
return
"new Token() { \n" +
"Id0 = " + ( this.Id0 == null ? "null" : this.Id0.ToString() ) + ",\n" +
"Id1 = " + ( this.Id1 == null ? "null" : this.Id1.ToString() ) + ",\n" +
"Caracteres0 = " + ( this.Caracteres0 == null ? "null" : this.Caracteres0.ToString() ) + ",\n" +
"Letra0 = " + Format.Literal(this.Letra0) + ",\n" +
"Caracteres1 = " + ( this.Caracteres1 == null ? "null" : this.Caracteres1.ToString() ) + ",\n" +
"Caracteres2 = " + ( this.Caracteres2 == null ? "null" : this.Caracteres2.ToString() ) + ",\n" +
"Letra1 = " + Format.Literal(this.Letra1) + ",\n" +
"Letra2 = " + Format.Literal(this.Letra2) + ",\n" +
"Id2 = " + ( this.Id2 == null ? "null" : this.Id2.ToString() ) + ",\n" +
"Id3 = " + ( this.Id3 == null ? "null" : this.Id3.ToString() ) + ",\n" +
"Id4 = " + ( this.Id4 == null ? "null" : this.Id4.ToString() ) + ",\n" +
"Id5 = " + ( this.Id5 == null ? "null" : this.Id5.ToString() ) + ",\n" +
"Id6 = " + ( this.Id6 == null ? "null" : this.Id6.ToString() ) + 
"}";
}
}

// ACTIONS ::= "ACTIONS" "RESERVADAS" "(" ")" "{" ListAction "}" ;
public class Actions {
public Listaction Listaction { get; set; }
  public override string ToString() {
return
"new Actions() { " +
"Listaction = " + ( this.Listaction == null ? "null" : this.Listaction.ToString() ) + 
"}";
}
}

// ListAction ::= IdAct "=" "'" IdRe "'" ;
public class Listaction {
public Idact Idact { get; set; }
public Idre Idre { get; set; }
  public override string ToString() {
return
"new Listaction() { \n" +
"Idact = " + ( this.Idact == null ? "null" : this.Idact.ToString() ) + ",\n" +
"Idre = " + ( this.Idre == null ? "null" : this.Idre.ToString() ) + 
"}";
}
}

// ERRORS ::= Prefijo "ERROR" "=" { IdERROR } ;
public class Errors {
public Prefijo Prefijo { get; set; }
public List<Iderror> Iderrors { get; set; }
  public Errors() {
this.Iderrors = new List<Iderror>();
}
  public override string ToString() {
return
"new Errors() { \n" +
"Prefijo = " + ( this.Prefijo == null ? "null" : this.Prefijo.ToString() ) + ",\n" +
"Iderrors = new List<Iderror>() {" + 
string.Join(",", this.Iderrors.Select(x => x.ToString())) +
"}" + 
"}";
}
}

// IdERROR ::= Numero | Numero Numero ;
public class Iderror {
public Numero Numero0 { get; set; }
public Numero Numero1 { get; set; }
public Numero Numero2 { get; set; }
  public override string ToString() {
return
"new Iderror() { \n" +
"Numero0 = " + ( this.Numero0 == null ? "null" : this.Numero0.ToString() ) + ",\n" +
"Numero1 = " + ( this.Numero1 == null ? "null" : this.Numero1.ToString() ) + ",\n" +
"Numero2 = " + ( this.Numero2 == null ? "null" : this.Numero2.ToString() ) + 
"}";
}
}

// Prefijo ::= Letra | Letra Letra ;
public class Prefijo {
public string Letra0 { get; set; }
public string Letra1 { get; set; }
public string Letra2 { get; set; }
  public override string ToString() {
return
"new Prefijo() { \n" +
"Letra0 = " + Format.Literal(this.Letra0) + ",\n" +
"Letra1 = " + Format.Literal(this.Letra1) + ",\n" +
"Letra2 = " + Format.Literal(this.Letra2) + 
"}";
}
}

// IdRe ::= Letra | Letra Letra ;
public class Idre {
public string Letra0 { get; set; }
public string Letra1 { get; set; }
public string Letra2 { get; set; }
  public override string ToString() {
return
"new Idre() { \n" +
"Letra0 = " + Format.Literal(this.Letra0) + ",\n" +
"Letra1 = " + Format.Literal(this.Letra1) + ",\n" +
"Letra2 = " + Format.Literal(this.Letra2) + 
"}";
}
}

// IdAct ::= Numero | Numero Numero ;
public class Idact {
public Numero Numero0 { get; set; }
public Numero Numero1 { get; set; }
public Numero Numero2 { get; set; }
  public override string ToString() {
return
"new Idact() { \n" +
"Numero0 = " + ( this.Numero0 == null ? "null" : this.Numero0.ToString() ) + ",\n" +
"Numero1 = " + ( this.Numero1 == null ? "null" : this.Numero1.ToString() ) + ",\n" +
"Numero2 = " + ( this.Numero2 == null ? "null" : this.Numero2.ToString() ) + 
"}";
}
}

// Chart ::= "CHR" "(" Numero Numero ")" | "CHR" "(" Numero Numero Numero ")" ;
public class Chart {
public Numero Numero0 { get; set; }
public Numero Numero1 { get; set; }
public Numero Numero2 { get; set; }
public Numero Numero3 { get; set; }
public Numero Numero4 { get; set; }
  public override string ToString() {
return
"new Chart() { \n" +
"Numero0 = " + ( this.Numero0 == null ? "null" : this.Numero0.ToString() ) + ",\n" +
"Numero1 = " + ( this.Numero1 == null ? "null" : this.Numero1.ToString() ) + ",\n" +
"Numero2 = " + ( this.Numero2 == null ? "null" : this.Numero2.ToString() ) + ",\n" +
"Numero3 = " + ( this.Numero3 == null ? "null" : this.Numero3.ToString() ) + ",\n" +
"Numero4 = " + ( this.Numero4 == null ? "null" : this.Numero4.ToString() ) + 
"}";
}
}

// CHR ::= Numero | Numero Numero | Numero Numero Numero ;
public class Chr {
public Numero Numero0 { get; set; }
public Numero Numero1 { get; set; }
public Numero Numero2 { get; set; }
public Numero Numero3 { get; set; }
public Numero Numero4 { get; set; }
public Numero Numero5 { get; set; }
  public override string ToString() {
return
"new Chr() { \n" +
"Numero0 = " + ( this.Numero0 == null ? "null" : this.Numero0.ToString() ) + ",\n" +
"Numero1 = " + ( this.Numero1 == null ? "null" : this.Numero1.ToString() ) + ",\n" +
"Numero2 = " + ( this.Numero2 == null ? "null" : this.Numero2.ToString() ) + ",\n" +
"Numero3 = " + ( this.Numero3 == null ? "null" : this.Numero3.ToString() ) + ",\n" +
"Numero4 = " + ( this.Numero4 == null ? "null" : this.Numero4.ToString() ) + ",\n" +
"Numero5 = " + ( this.Numero5 == null ? "null" : this.Numero5.ToString() ) + 
"}";
}
}

// Let ::= "'" Letra "'" ".." "'" Letra "'" | "'" Letra "'" ".." "'" Letra "'" "+" "'" Letra "'" ".." "'" Letra "'" | "'" Letra "'" ".." "'" Letra "'" "+" "'" "_" "'" | "'" Letra "'" ".." "'" Letra "'" "+" "'" Letra "'" ".." "'" Letra "'" "+" "'" "_" "'" ;
public class Let {
public string Letra0 { get; set; }
public string Letra1 { get; set; }
public string Letra2 { get; set; }
public string Letra3 { get; set; }
public string Letra4 { get; set; }
public string Letra5 { get; set; }
public string Letra6 { get; set; }
public string Letra7 { get; set; }
public string Letra8 { get; set; }
public string Letra9 { get; set; }
public string Letra10 { get; set; }
public string Letra11 { get; set; }
  public override string ToString() {
return
"new Let() { \n" +
"Letra0 = " + Format.Literal(this.Letra0) + ",\n" +
"Letra1 = " + Format.Literal(this.Letra1) + ",\n" +
"Letra2 = " + Format.Literal(this.Letra2) + ",\n" +
"Letra3 = " + Format.Literal(this.Letra3) + ",\n" +
"Letra4 = " + Format.Literal(this.Letra4) + ",\n" +
"Letra5 = " + Format.Literal(this.Letra5) + ",\n" +
"Letra6 = " + Format.Literal(this.Letra6) + ",\n" +
"Letra7 = " + Format.Literal(this.Letra7) + ",\n" +
"Letra8 = " + Format.Literal(this.Letra8) + ",\n" +
"Letra9 = " + Format.Literal(this.Letra9) + ",\n" +
"Letra10 = " + Format.Literal(this.Letra10) + ",\n" +
"Letra11 = " + Format.Literal(this.Letra11) + 
"}";
}
}

// Dig ::= "'" Numero "'" ".." "'" Numero "'" ;
public class Dig {
public Numero Numero0 { get; set; }
public Numero Numero1 { get; set; }
  public override string ToString() {
return
"new Dig() { \n" +
"Numero0 = " + ( this.Numero0 == null ? "null" : this.Numero0.ToString() ) + ",\n" +
"Numero1 = " + ( this.Numero1 == null ? "null" : this.Numero1.ToString() ) + 
"}";
}
}

// Id ::= "LETRA" | "DIGITO" | "CHARSET" ;
public class Id {
public bool HasLetra { get; set; }
public bool HasDigito { get; set; }
public bool HasCharset { get; set; }
  public override string ToString() {
return
"new Id() { \n" +
"HasLetra = " + this.HasLetra + ",\n" +
"HasDigito = " + this.HasDigito + ",\n" +
"HasCharset = " + this.HasCharset + 
"}";
}
}

// IdT ::= "TOKEN" Numero | "TOKEN" Numero Numero ;
public class Idt {
public Numero Numero0 { get; set; }
public Numero Numero1 { get; set; }
public Numero Numero2 { get; set; }
  public override string ToString() {
return
"new Idt() { \n" +
"Numero0 = " + ( this.Numero0 == null ? "null" : this.Numero0.ToString() ) + ",\n" +
"Numero1 = " + ( this.Numero1 == null ? "null" : this.Numero1.ToString() ) + ",\n" +
"Numero2 = " + ( this.Numero2 == null ? "null" : this.Numero2.ToString() ) + 
"}";
}
}

// Numero ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
public class Numero {
public bool Has0 { get; set; }
public bool Has1 { get; set; }
public bool Has2 { get; set; }
public bool Has3 { get; set; }
public bool Has4 { get; set; }
public bool Has5 { get; set; }
public bool Has6 { get; set; }
public bool Has7 { get; set; }
public bool Has8 { get; set; }
public bool Has9 { get; set; }
  public override string ToString() {
return
"new Numero() { \n" +
"Has0 = " + this.Has0 + ",\n" +
"Has1 = " + this.Has1 + ",\n" +
"Has2 = " + this.Has2 + ",\n" +
"Has3 = " + this.Has3 + ",\n" +
"Has4 = " + this.Has4 + ",\n" +
"Has5 = " + this.Has5 + ",\n" +
"Has6 = " + this.Has6 + ",\n" +
"Has7 = " + this.Has7 + ",\n" +
"Has8 = " + this.Has8 + ",\n" +
"Has9 = " + this.Has9 + 
"}";
}
}

// Caracteres ::= "=" | "<" | ">" | "+" | "_" | "*" | "(" | ")" | ";" | ":" | "." | "," | "|" | "{" | "}" | "[" | "]" ;
public class Caracteres {
public bool HasEquals { get; set; }
public bool HasLessThan { get; set; }
public bool HasGreaterThan { get; set; }
public bool HasPlus { get; set; }
public bool Has_ { get; set; }
public bool HasStar { get; set; }
public bool HasOpenBracket { get; set; }
public bool HasCloseBracket { get; set; }
public bool HasSemiColon { get; set; }
public bool HasColon { get; set; }
public bool HasDot { get; set; }
public bool HasComma { get; set; }
public bool HasPipeline { get; set; }
public bool HasOpenBrace { get; set; }
public bool HasCloseBrace { get; set; }
public bool HasOpenSquareBracket { get; set; }
public bool HasCloseSquareBracket { get; set; }
  public override string ToString() {
return
"new Caracteres() { \n" +
"HasEquals = " + this.HasEquals + ",\n" +
"HasLessThan = " + this.HasLessThan + ",\n" +
"HasGreaterThan = " + this.HasGreaterThan + ",\n" +
"HasPlus = " + this.HasPlus + ",\n" +
"Has_ = " + this.Has_ + ",\n" +
"HasStar = " + this.HasStar + ",\n" +
"HasOpenBracket = " + this.HasOpenBracket + ",\n" +
"HasCloseBracket = " + this.HasCloseBracket + ",\n" +
"HasSemiColon = " + this.HasSemiColon + ",\n" +
"HasColon = " + this.HasColon + ",\n" +
"HasDot = " + this.HasDot + ",\n" +
"HasComma = " + this.HasComma + ",\n" +
"Has| = " + this.HasPipeline + ",\n" +
"HasOpenBrace = " + this.HasOpenBrace + ",\n" +
"HasCloseBrace = " + this.HasCloseBrace + ",\n" +
"HasOpenSquareBracket = " + this.HasOpenSquareBracket + ",\n" +
"HasCloseSquareBracket = " + this.HasCloseSquareBracket + 
"}";
}
}

public class Parser : ParserBase<Nicio> {


// nicio ::= SETS ;
public override Nicio Parse() {
Nicio nicio = new Nicio();
Log( "ParseNicio" );
Parse( () => {
nicio.Sets = ParseSets();
}).OrThrow("Failed to parse Nicio");
return nicio;
}

// SETS ::= "SETS" { ListSet } ;
public Sets ParseSets() {
Sets sets = new Sets();
Log( "ParseSets" );
Parse( () => {
Consume("SETS");
sets.Listsets = Many<Listset>(ParseListset);
}).OrThrow("Failed to parse Sets");
return sets;
}

// ListSet ::= ( Id "=" Let ) | ( Id "=" Dig ) | ( Id "=" Chart ) ;
public Listset ParseListset() {
Listset listset = new Listset();
Log( "ParseListset" );
Parse( () => {
Parse( () => { 
listset.Id0 = ParseId();
Consume("=");
listset.Let = ParseLet();
})
.Or( () => { 
listset.Id1 = ParseId();
Consume("=");
listset.Dig = ParseDig();
})
.Or( () => { 
listset.Id2 = ParseId();
Consume("=");
listset.Chart = ParseChart();
})
.OrThrow("Expected: [Id,=,Let] | [Id,=,Dig] | [Id,=,Chart]"); 
}).OrThrow("Failed to parse Listset");
return listset;
}

// TOKENS ::= "TOKENS" { ListToken } ;
public Tokens ParseTokens() {
Tokens tokens = new Tokens();
Log( "ParseTokens" );
Parse( () => {
Consume("TOKENS");
tokens.Listtokens = Many<Listtoken>(ParseListtoken);
}).OrThrow("Failed to parse Tokens");
return tokens;
}

// ListToken ::= IdT "=" TOKEN ;
public Listtoken ParseListtoken() {
Listtoken listtoken = new Listtoken();
Log( "ParseListtoken" );
Parse( () => {
listtoken.Idt = ParseIdt();
Consume("=");
listtoken.Token = ParseToken();
}).OrThrow("Failed to parse Listtoken");
return listtoken;
}

// TOKEN ::= Id Id "*" | "'" Caracteres "'" | "'" Letra "'" | "'" Caracteres "'" "'" Caracteres "'" | "'" Letra "'" "'" Letra "'" | "'" "" "" Id "" "" "'" | "'" "'" "'" Id "'" "'" "'" | Id "(" Id "|" Id ")" "*" "{" "RESERVADAS" "(" ")" "}" ;
public Token ParseToken() {
Token token = new Token();
Log( "ParseToken" );
Parse( () => {
Parse( () => { 
token.Id0 = ParseId();
token.Id1 = ParseId();
Consume("*");
})
.Or( () => { 
Consume("'");
token.Caracteres0 = ParseCaracteres();
Consume("'");
})
.Or( () => { 
Consume("'");
token.Letra0 = Consume(Extracting.Letra);
Consume("'");
})
.Or( () => { 
Consume("'");
token.Caracteres1 = ParseCaracteres();
Consume("'");
Consume("'");
token.Caracteres2 = ParseCaracteres();
Consume("'");
})
.Or( () => { 
Consume("'");
token.Letra1 = Consume(Extracting.Letra);
Consume("'");
Consume("'");
token.Letra2 = Consume(Extracting.Letra);
Consume("'");
})
.Or( () => { 
Consume("'");
Consume("");
Consume("");
token.Id2 = ParseId();
Consume("");
Consume("");
Consume("'");
})
.Or( () => { 
Consume("'");
Consume("'");
Consume("'");
token.Id3 = ParseId();
Consume("'");
Consume("'");
Consume("'");
})
.Or( () => { 
token.Id4 = ParseId();
Consume("(");
token.Id5 = ParseId();
Consume("|");
token.Id6 = ParseId();
Consume(")");
Consume("*");
Consume("{");
Consume("RESERVADAS");
Consume("(");
Consume(")");
Consume("}");
})
.OrThrow("Expected: [Id,Id,*] | [',Caracteres,'] | [',Letra,'] | [',Caracteres,',',Caracteres,'] | [',Letra,',',Letra,'] | [',,,Id,,,'] | [',',',Id,',','] | [Id,(,Id,|,Id,),*,{,RESERVADAS,(,),}]"); 
}).OrThrow("Failed to parse Token");
return token;
}

// ACTIONS ::= "ACTIONS" "RESERVADAS" "(" ")" "{" ListAction "}" ;
public Actions ParseActions() {
Actions actions = new Actions();
Log( "ParseActions" );
Parse( () => {
Consume("ACTIONS");
Consume("RESERVADAS");
Consume("(");
Consume(")");
Consume("{");
actions.Listaction = ParseListaction();
Consume("}");
}).OrThrow("Failed to parse Actions");
return actions;
}

// ListAction ::= IdAct "=" "'" IdRe "'" ;
public Listaction ParseListaction() {
Listaction listaction = new Listaction();
Log( "ParseListaction" );
Parse( () => {
listaction.Idact = ParseIdact();
Consume("=");
Consume("'");
listaction.Idre = ParseIdre();
Consume("'");
}).OrThrow("Failed to parse Listaction");
return listaction;
}

// ERRORS ::= Prefijo "ERROR" "=" { IdERROR } ;
public Errors ParseErrors() {
Errors errors = new Errors();
Log( "ParseErrors" );
Parse( () => {
errors.Prefijo = ParsePrefijo();
Consume("ERROR");
Consume("=");
errors.Iderrors = Many<Iderror>(ParseIderror);
}).OrThrow("Failed to parse Errors");
return errors;
}

// IdERROR ::= Numero | Numero Numero ;
public Iderror ParseIderror() {
Iderror iderror = new Iderror();
Log( "ParseIderror" );
Parse( () => {
Parse( () => { 
iderror.Numero0 = ParseNumero();
})
.Or( () => { 
iderror.Numero1 = ParseNumero();
iderror.Numero2 = ParseNumero();
})
.OrThrow("Expected: Numero | [Numero,Numero]"); 
}).OrThrow("Failed to parse Iderror");
return iderror;
}

// Prefijo ::= Letra | Letra Letra ;
public Prefijo ParsePrefijo() {
Prefijo prefijo = new Prefijo();
Log( "ParsePrefijo" );
Parse( () => {
Parse( () => { 
prefijo.Letra0 = Consume(Extracting.Letra);
})
.Or( () => { 
prefijo.Letra1 = Consume(Extracting.Letra);
prefijo.Letra2 = Consume(Extracting.Letra);
})
.OrThrow("Expected: Letra | [Letra,Letra]"); 
}).OrThrow("Failed to parse Prefijo");
return prefijo;
}

// IdRe ::= Letra | Letra Letra ;
public Idre ParseIdre() {
Idre idre = new Idre();
Log( "ParseIdre" );
Parse( () => {
Parse( () => { 
idre.Letra0 = Consume(Extracting.Letra);
})
.Or( () => { 
idre.Letra1 = Consume(Extracting.Letra);
idre.Letra2 = Consume(Extracting.Letra);
})
.OrThrow("Expected: Letra | [Letra,Letra]"); 
}).OrThrow("Failed to parse Idre");
return idre;
}

// IdAct ::= Numero | Numero Numero ;
public Idact ParseIdact() {
Idact idact = new Idact();
Log( "ParseIdact" );
Parse( () => {
Parse( () => { 
idact.Numero0 = ParseNumero();
})
.Or( () => { 
idact.Numero1 = ParseNumero();
idact.Numero2 = ParseNumero();
})
.OrThrow("Expected: Numero | [Numero,Numero]"); 
}).OrThrow("Failed to parse Idact");
return idact;
}

// Chart ::= "CHR" "(" Numero Numero ")" | "CHR" "(" Numero Numero Numero ")" ;
public Chart ParseChart() {
Chart chart = new Chart();
Log( "ParseChart" );
Parse( () => {
Parse( () => { 
Consume("CHR");
Consume("(");
chart.Numero0 = ParseNumero();
chart.Numero1 = ParseNumero();
Consume(")");
})
.Or( () => { 
Consume("CHR");
Consume("(");
chart.Numero2 = ParseNumero();
chart.Numero3 = ParseNumero();
chart.Numero4 = ParseNumero();
Consume(")");
})
.OrThrow("Expected: [CHR,(,Numero,Numero,)] | [CHR,(,Numero,Numero,Numero,)]"); 
}).OrThrow("Failed to parse Chart");
return chart;
}

// CHR ::= Numero | Numero Numero | Numero Numero Numero ;
public Chr ParseChr() {
Chr chr = new Chr();
Log( "ParseChr" );
Parse( () => {
Parse( () => { 
chr.Numero0 = ParseNumero();
})
.Or( () => { 
chr.Numero1 = ParseNumero();
chr.Numero2 = ParseNumero();
})
.Or( () => { 
chr.Numero3 = ParseNumero();
chr.Numero4 = ParseNumero();
chr.Numero5 = ParseNumero();
})
.OrThrow("Expected: Numero | [Numero,Numero] | [Numero,Numero,Numero]"); 
}).OrThrow("Failed to parse Chr");
return chr;
}

// Let ::= "'" Letra "'" ".." "'" Letra "'" | "'" Letra "'" ".." "'" Letra "'" "+" "'" Letra "'" ".." "'" Letra "'" | "'" Letra "'" ".." "'" Letra "'" "+" "'" "_" "'" | "'" Letra "'" ".." "'" Letra "'" "+" "'" Letra "'" ".." "'" Letra "'" "+" "'" "_" "'" ;
public Let ParseLet() {
Let let = new Let();
Log( "ParseLet" );
Parse( () => {
Parse( () => { 
Consume("'");
let.Letra0 = Consume(Extracting.Letra);
Consume("'");
Consume("..");
Consume("'");
let.Letra1 = Consume(Extracting.Letra);
Consume("'");
})
.Or( () => { 
Consume("'");
let.Letra2 = Consume(Extracting.Letra);
Consume("'");
Consume("..");
Consume("'");
let.Letra3 = Consume(Extracting.Letra);
Consume("'");
Consume("+");
Consume("'");
let.Letra4 = Consume(Extracting.Letra);
Consume("'");
Consume("..");
Consume("'");
let.Letra5 = Consume(Extracting.Letra);
Consume("'");
})
.Or( () => { 
Consume("'");
let.Letra6 = Consume(Extracting.Letra);
Consume("'");
Consume("..");
Consume("'");
let.Letra7 = Consume(Extracting.Letra);
Consume("'");
Consume("+");
Consume("'");
Consume("_");
Consume("'");
})
.Or( () => { 
Consume("'");
let.Letra8 = Consume(Extracting.Letra);
Consume("'");
Consume("..");
Consume("'");
let.Letra9 = Consume(Extracting.Letra);
Consume("'");
Consume("+");
Consume("'");
let.Letra10 = Consume(Extracting.Letra);
Consume("'");
Consume("..");
Consume("'");
let.Letra11 = Consume(Extracting.Letra);
Consume("'");
Consume("+");
Consume("'");
Consume("_");
Consume("'");
})
.OrThrow("Expected: [',Letra,',..,',Letra,'] | [',Letra,',..,',Letra,',+,',Letra,',..,',Letra,'] | [',Letra,',..,',Letra,',+,',_,'] | [',Letra,',..,',Letra,',+,',Letra,',..,',Letra,',+,',_,']"); 
}).OrThrow("Failed to parse Let");
return let;
}

// Dig ::= "'" Numero "'" ".." "'" Numero "'" ;
public Dig ParseDig() {
Dig dig = new Dig();
Log( "ParseDig" );
Parse( () => {
Consume("'");
dig.Numero0 = ParseNumero();
Consume("'");
Consume("..");
Consume("'");
dig.Numero1 = ParseNumero();
Consume("'");
}).OrThrow("Failed to parse Dig");
return dig;
}

// Id ::= "LETRA" | "DIGITO" | "CHARSET" ;
public Id ParseId() {
Id id = new Id();
Log( "ParseId" );
Parse( () => {
Parse( () => { 
id.HasLetra = Consume("LETRA");
})
.Or( () => { 
id.HasDigito = Consume("DIGITO");
})
.Or( () => { 
id.HasCharset = Consume("CHARSET");
})
.OrThrow("Expected: LETRA | DIGITO | CHARSET"); 
}).OrThrow("Failed to parse Id");
return id;
}

// IdT ::= "TOKEN" Numero | "TOKEN" Numero Numero ;
public Idt ParseIdt() {
Idt idt = new Idt();
Log( "ParseIdt" );
Parse( () => {
Parse( () => { 
Consume("TOKEN");
idt.Numero0 = ParseNumero();
})
.Or( () => { 
Consume("TOKEN");
idt.Numero1 = ParseNumero();
idt.Numero2 = ParseNumero();
})
.OrThrow("Expected: [TOKEN,Numero] | [TOKEN,Numero,Numero]"); 
}).OrThrow("Failed to parse Idt");
return idt;
}

// Numero ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
public Numero ParseNumero() {
Numero numero = new Numero();
Log( "ParseNumero" );
Parse( () => {
Parse( () => { 
numero.Has0 = Consume("0");
})
.Or( () => { 
numero.Has1 = Consume("1");
})
.Or( () => { 
numero.Has2 = Consume("2");
})
.Or( () => { 
numero.Has3 = Consume("3");
})
.Or( () => { 
numero.Has4 = Consume("4");
})
.Or( () => { 
numero.Has5 = Consume("5");
})
.Or( () => { 
numero.Has6 = Consume("6");
})
.Or( () => { 
numero.Has7 = Consume("7");
})
.Or( () => { 
numero.Has8 = Consume("8");
})
.Or( () => { 
numero.Has9 = Consume("9");
})
.OrThrow("Expected: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9"); 
}).OrThrow("Failed to parse Numero");
return numero;
}

// Caracteres ::= "=" | "<" | ">" | "+" | "_" | "*" | "(" | ")" | ";" | ":" | "." | "," | "|" | "{" | "}" | "[" | "]" ;
public Caracteres ParseCaracteres() {
Caracteres caracteres = new Caracteres();
Log( "ParseCaracteres" );
Parse( () => {
Parse( () => { 
caracteres.HasEquals = Consume("=");
})
.Or( () => { 
caracteres.HasLessThan = Consume("<");
})
.Or( () => { 
caracteres.HasGreaterThan = Consume(">");
})
.Or( () => { 
caracteres.HasPlus = Consume("+");
})
.Or( () => { 
caracteres.Has_ = Consume("_");
})
.Or( () => { 
caracteres.HasStar = Consume("*");
})
.Or( () => { 
caracteres.HasOpenBracket = Consume("(");
})
.Or( () => { 
caracteres.HasCloseBracket = Consume(")");
})
.Or( () => { 
caracteres.HasSemiColon = Consume(";");
})
.Or( () => { 
caracteres.HasColon = Consume(":");
})
.Or( () => { 
caracteres.HasDot = Consume(".");
})
.Or( () => { 
caracteres.HasComma = Consume(",");
})
.Or( () => { 
caracteres.HasPipeline = Consume("|");
})
.Or( () => { 
caracteres.HasOpenBrace = Consume("{");
})
.Or( () => { 
caracteres.HasCloseBrace = Consume("}");
})
.Or( () => { 
caracteres.HasOpenSquareBracket = Consume("[");
})
.Or( () => { 
caracteres.HasCloseSquareBracket = Consume("]");
})
.OrThrow("Expected: = | < | > | + | _ | * | ( | ) | ; | : | . | , | | | { | } | [ | ]"); 
}).OrThrow("Failed to parse Caracteres");
return caracteres;
}

}

public class Extracting {
public static Regex Letra = new Regex(@"^([A-Z][a-z]*)");
}
